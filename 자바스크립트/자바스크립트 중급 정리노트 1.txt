1. 생성자 함수 : 비슷한 객체를 많이 생성해야 할 때 사용

EX)	function User(name, age) {			// 첫 글자는 대문자 사용
		this.name = name;
		this.age = age;
	}

	let user1 = new User('Mike', 30);		// new 연산자를 사용하여 호출
	let user2 = new User('Jane', 22);
	let user3 = new User('Tom', 17);


2. 객체 메소드, 계산된 프로퍼티(computed property)

1) 객체에서 사용할 수 있는 중요 메서드

- Object.assign() : 객체 복제		// 원본은 그대로 두고 내용만 복제하여 생성
EX) const newUser = Object.assign({}, user);		// 첫번째 인자값 {} 는 초기값.

- Object.keys() : 키 배열 반환		// 키만 반환해줌
- Object.values() : 값 배열 반환		// 값만 반환해줌
- Object.entries() : 키/값 배열 반환	// [키, 값] 형태로 묶어 반환해줌
- Object.fromEntries() : 키/값 배열을 객체로 반환		// { 키 : 값, 키 : 값, ... } 형태로 반환해줌


2) 계산된 프로퍼티

EX)	let a = 'age';
	
	const user = {
		name : 'Mike',
		[a] : 30		// age : 30			// 계산된 프로퍼티
	}

EX)	const user = {
		[1+4] : 5,		// 식 자체를 넣는 것도 가능	// 5 : 5 와 동일
		["안녕" + "하세요"] : "Hello"	// 안녕하세요 : "Hello"
	}



3. 심볼 (Symbol)
- 유일한 식별자가 필요할 때 사용
- new 를 붙이지 않고 Symbol()로 선언		// () 내부에 설명을 붙혀줄 수 있다.
- 메소드에서 심볼형인 프로퍼티는 건너뛴다.
- 주로 특정 객체에 원본을 건들이지 않고 특정 속성을 추가하기 위해 사용
  (다른 사람 코드 수정 시 주로 사용)

EX)	const id1 = Symbol('id');
	const id2 = Symbol('id');
	
	id1 === id2;		// 결과) false
					// Symbol은 유일한 식별자 이므로 이름이 같더라도 다르다.


4. 전역 심볼 (Symbol.for)
- 없으면 만들고, 있으면 가져오기 때문에 하나의 심볼만 보장 받을 수 있다. 
- 하나를 생성하고 키를 통해 같은 심볼을 공유한다.

EX)	const id1 = Symbol.for('id');
	const id2 = Symbol.for('id');
	
	id1 === id2;		// 결과) true
					// Symbol.for로 하나의 Symbol('id')를 생성하여 공유하기 때문에 같다.


※ description : 해당 변수의 심볼 설명을 가져옴






